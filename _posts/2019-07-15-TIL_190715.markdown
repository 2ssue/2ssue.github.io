---
title:  "TIL_190715"
date:   2019-07-15 18:41:24 +0900
categories: VCS
tags: git
last_modified_at: 2019-07-15 18:41:24 +0900
---

* fork해서 PR(Pull Request) 보내기  
  * 이와 같은 방법은 주로 Open Source에 Contribute를 할 때 많이 사용된다.  
  > 1. 기능을 추가로 개발할 Repository fork하기  
  > 2. 로컬 저장소(내 컴퓨터)로 clone하기
  > 3. 기능 개발 후 commit 하기
  > 4. 내 원격 저장소에 push하기
  > 5. Github Web에서 Pull Request 보내기

* git branch란? 
  *  [Git 명령어 및 Git 기능 설명](https://2ssue.github.io/vcs/git-command/) 포스트에 추가로 정리해 업데이트함  
  * git fork와 Pull Request에 대한 정리도 해두었음

* git workflow란?  
  * [Git을 이용한 협업 워크플로우](https://lhy.kr/git-workflow) 글 참고  
  * 추후 정리 예정
  * 왜 이런 방법을 사용하는 것일까?   
  
* git add와 git commit시 git의 내부 동작  
  * git add
    1. `objects` 파일 생성
    > * 파일의 내용이 저장되어 있음
    2. `index` 파일 생성
    > * add된 파일들에 대한 list 정보
    > * 각 파일의 `objects` 파일 링크와 파일 이름 정보가 list 형태로 저장
  * git commit 
    1. `objects` 파일 생성
    > * 저자, 커밋 메시지, 이전 커밋 링크, commit된 파일 정보 저장
    > * commit된 파일 정보는 git add의 `index`의 형태와 동일하나 `objects` 파일로 저장됨.
    > * 따라서 `commit의 objects`파일이  `add의 index(objects)`파일을 가르키고, `add의 index`파일이 `add의 objects`파일들을 가르키고 있다고 생각하면 편할 듯.
    > * 이전 commit의 링크도 이러한 이전 파일 `objects`를 가지고 있음으로써 이전 commit과 현재 commit의 다른 점을 확인할 수 있게 되는 것.
    2. 새로 commit 됨에 따라 이전의 `index` 파일, HEAD가 가르키고 있는 마지막 commit 등의 정보가 변경됨.
  * 이에 대한 좀 더 자세한 내용은 [git add와 git commit](https://2ssue.github.io/vcs/git-add_git-commit)에 정리해두었음

* git commit 권고 사항
  * commit을 할 때는 되도록 기능 별로, 개발 사항을 알아볼 수 있게 메시지를 작성한다.
  * 파일의 이름은 

* javascript 명명 규칙
  * javascript의 명명 규칙은 Java와 같은 Camel 표기법이다.  
  > * 첫 글자는 소문자/이후 추가 단어는 대문자로 시작하는 표기법이다.  
  > * ex)숫자를 더하는 함수일 경우, addNumber와 같이 명명.  

