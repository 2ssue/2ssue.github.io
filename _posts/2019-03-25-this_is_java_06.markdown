---
title:  "[이것이 자바다] 06 클래스 확인문제"
date:   2019-03-25 17:05:24 +0900
categories: java
tags: java
classes: wide
---

### 클래스의 구성 멤버

```java
public class ClassName{
	//Field
	int fieldName;

	//Constructor
	ClassName(){...}

	//Method
	void methodName(){...}
}
```

#### 필드(Field)  

객체의 고유 데이터, 부품 객체, 상태 정보를 저장하는 곳  
변수와 비슷하지만 객체가 소멸되지 않는 한 계속 사용이 가능하다.    
  
#### 생성자(Constructor)
  
객체 생성 시 초기화를 담당  
필드를 초기화하거나, 메소드를 호출해 객체를 사용할 준비를 한다.  
메소드와 비슷하지만 리턴타입이 없다는 특징이 있다.  
클래스 이름과 생성자의 이름은 같아야 한다.  
  
>##### 기본 생성자
>생성자를 선언하지 않았을 때는 컴파일러가 기본 생성자를 바이트 코드에 추가한다.  
>  
>##### 생성자 선언
>일반적으로 필드에 초기 값을 저장하거나 객체를 사용하기 전 준비하는데 사용한다.  
>생성자는 오버로딩하여 사용할 수 있다.  
>오버로딩을 할 때는 매개 변수의 타입, 개수, 순서 중 하나가 달라야 한다.  
> ```java
> //Declare
> public class Car{
>   //Field
>   String model;
>   String color;
>   int maxSpeed;
>   
>   //Constructor
>   Car(String model, String color, int maxSpeed){
>       this.model = model;
>       this.color = color;
>       this.maxSpeed = maxSpeed;
>   }
> }
> 
> //Use
> Car myCar = new Car("그랜저", "검정", 300);
> ```

#### 메소드(Method)
  
매개값을 받아 다른 값을 리턴하는 동작 등 다양한 역할을 한다.  
  
### Singleton
  
단 하나만 생성되는 객체. 클래스 외부에서 생성자를 호출할 수 없도록 해야한다.  

```java
public class SingletonExample{
    //static Field
    private static SingletonExample singleton = new SingletonExample();

    //Constructor
    private SingletonExample(){}

    //static Method
    static SingletonExample getInstance(){
        return singleton;
    }
}
//Can't Use (Compile Error)
SingletonExample object1 = new SingletonExample();  
//Use
SingletonExample object1 = SingletonExample.getInstance();
```