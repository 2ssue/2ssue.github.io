<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>안하는 것 보단 늦는게 낫다</title>
    <description>Programming study records</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 10 Apr 2019 22:42:01 +0900</pubDate>
    <lastBuildDate>Wed, 10 Apr 2019 22:42:01 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>190410_Prepare Job Interview</title>
        <description>&lt;p&gt;오늘은 개발 상식 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;tdd란-무엇인가&quot;&gt;TDD란 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Test-Driven Development(TDD)&lt;/code&gt;는 짧은 개발 사이클 반복에 의존하는 소프트웨어 개발 프로세스다.&lt;br /&gt;
먼저 요구되는 새로운 기능에 대한 자동화 테스트 케이스를 작성하고, 테스트를 통과하는 가장 간단한 코드를 작성한다.&lt;br /&gt;
즉 일단 테스트를 통과하는 코드를 작성 후, 상황에 맞게 리팩토링하는 과정을 거치는 것을 말한다.&lt;/p&gt;

&lt;p&gt;테스트를 작성하기 위해서는 개발자가 해당 기능의 요구사항과 명세를 분명히 이해하고 있어야 한다.&lt;br /&gt;
Use Case와 User Experience 등이 있으며, 코드를 작성하기 전 요구사항에 보다 집중할 수 있도록 하는 것이 TDD의 장점이다.&lt;br /&gt;
또한 테스트 코드 작성을 통해 새로운 기능 추가로 인한 기존 기능의 Side Effect가 있는지 쉽게 확인할 수 있다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;하지만 테스트 코드 작성으로 인한 코드량이 늘어나 빠른 생산성이 요구되는 경우에는 TDD가 걸림돌이 될 수 있다.&lt;br /&gt;
또한 모든 상황에 테스트 코드를 쉽게 적용할 수 있는 것이 아니기 때문에 배보다 배꼽이 더 커지는 경우가 발생할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;메모리-누수란-무엇인가-메모리-누수를-해결하기-위한-방법은&quot;&gt;메모리 누수란 무엇인가? 메모리 누수를 해결하기 위한 방법은?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;메모리 누수(Memory leak)&lt;/code&gt; 현상은 프로그램이 필요하지 않는(더이상 사용하지 않는) 메모리를 점유하고 있는 현상을 말한다.&lt;br /&gt;
할당한 메모리를 사용한 다음, 반환하지 않는 것이 누적되어 발생하는 현상이다.&lt;/p&gt;

&lt;p&gt;일반적으로 라이브러리를 활용해 디버거 모드를 종료하면 메모리 누수를 확인하도록 할 수 있다.&lt;br /&gt;
이러한 라이브러리를 통해서 메모리 누수 지점을 확인하고, 해당 메모리를 해제하면 된다.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2019 22:03:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190410_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190410_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>객체 지향 프로그래밍과 절차 지향 프로그래밍의 차이</title>
        <description>&lt;p&gt;0409_PJI는 이걸로 대체한다.&lt;/p&gt;

&lt;p&gt;흔히 객체 지향 프로그래밍과 절차 지향 프로그래밍을 말할 때 Java와 C를 말한다.&lt;br /&gt;
그래서 절차지향과 객체지향은 처음에는 작성 순서의 차이라고 생각했는데,&lt;br /&gt;
생각해보니 함수 선언부가 있으면 C언어도 작성 순서는 다르게 짤 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 항상 절차 지향과 객체 지향을 설명하라고 하면 잘 이해가 가지 않았다.&lt;br /&gt;
이번 기회에 한번 정리해보기로 했다 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;객체-지향-프로그래밍과-절차-지향-프로그래밍의-차이는&quot;&gt;객체 지향 프로그래밍과 절차 지향 프로그래밍의 차이는?&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;절차 지향은 데이터를 중심으로 코드를 구현하고, 객체 지향은 기능을 중심으로 구현한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;절차-지향-프로그래밍&quot;&gt;절차 지향 프로그래밍&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;someServiceCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TO-DO SOMETHING...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Member Class의 일부&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expirationDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드는 회원 만료 여부를 확인하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;member.getExpirationDate()&lt;/code&gt;를 통해 만료일을 구한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt; 메서드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;member&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;expirationDate&lt;/code&gt; 데이터를 사용하는 것이다.&lt;br /&gt;
이 시점에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;expirationDate&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt;가 공유하고 있다.&lt;/p&gt;

&lt;p&gt;만약 여기서 회원의 만료일을 1년 늘려주는 코드를 작성한다고 하자. 그럼 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;renewContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renewedDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renewedDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;expirationDate&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;renewContract()&lt;/code&gt;가 공유하고 있다.&lt;/p&gt;

&lt;p&gt;이런 식으로 코드를 작성했다면, Member는 Object라고 할 수 있을까?&lt;br /&gt;
그렇지 않다.&lt;/p&gt;

&lt;p&gt;정확히 보자면 Member는 Object라기보다는 데이터를 담는 구조체에 가깝다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;renewContract()&lt;/code&gt;가 데이터를 공유하고, 이것을 기준으로 구현하는 것이 전형적인 절차지향 방식이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;renewContract()&lt;/code&gt;와 같은 프로시저가 기능을 구현하지만, 기능의 완성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;expirationDate&lt;/code&gt; 데이터 공유에 있다.&lt;/p&gt;

&lt;p&gt;하지만 데이터를 공유해 사용하게 되면 다른 프로시저에서 데이터를 변경하면서 따르는 SideEffect가 있을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;객체-지향-프로그래밍&quot;&gt;객체 지향 프로그래밍&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 설명한 절차 지향 코드를 객체 지향적으로 바꿔보면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRestDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TO-DO SOMETHING...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renewContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TO-DO SOMETHING...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 만료 여부를 확인하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;expirationDate&lt;/code&gt;를 사용하지 않는다.&lt;br /&gt;
대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;isExpired()&lt;/code&gt; 메소드를 통해 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;객체지향에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceCheck()&lt;/code&gt;를 구현해보자면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;someServiceCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TO-DO SOMETHING...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞선 절차 지향적 프로그래밍에서 데이터를 변경하는 프로시저였던 &lt;code class=&quot;highlighter-rouge&quot;&gt;renewContract()&lt;/code&gt;는&lt;br /&gt;
객체 지향에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;의 안으로 들어갔다. 데이터와 밀접하게 연결된 데이터이기 때문이다.&lt;/p&gt;

&lt;p&gt;이렇게 함으로써 객체의 내부 구현(데이터)를 외부에 노출하지 않을 수 있다.&lt;br /&gt;
이것이 바로 &lt;strong&gt;캡슐화&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;기능 구현을 캡슐화하면 내부 구현 변경을 조금 더 쉽게 할 수 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;객체를 사용함으로써 만료 여부 로직을 변경한다고해서 다른 코드가 영향을 받지는 않게 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 글은 &lt;a href=&quot;https://javacan.tistory.com/entry/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EA%B3%BC-%EC%A0%88%EC%B0%A8-%EC%A7%80%ED%96%A5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A7%88%EB%AC%B8-%EB%8B%B5%EB%B3%80&quot;&gt;객체지향과 절차지향에 대한 질문 답변&lt;/a&gt;을 참고하여 내가 이해한 방식으로 다시 작성해보았다.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Apr 2019 23:03:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190409_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190409_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>190408_Prepare Job Interview</title>
        <description>&lt;p&gt;오늘은 자료구조 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;stack이란-무엇인가&quot;&gt;Stack이란 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Last In First Out(LIFO)&lt;/code&gt; 구조의 선형 자료구조로, 나중에 들어간 원소가 먼저 나온다. (후입선출)&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; 순서로 스택에 넣었다면, 아래와 같이 쌓여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 순으로 출력된다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stack&lt;/td&gt;
      &lt;td&gt;출력순서&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;queue란-무엇인가&quot;&gt;Queue란 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;First In First Out(FIFO&lt;/code&gt; 구조의 선형 자료구조로, 먼저 들어간 원소가 먼저 나온다. (선입선출)&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; 순으로 큐에 넣었다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; 순으로 출력된다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Queue&lt;/td&gt;
      &lt;td&gt;출력순서&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 08 Apr 2019 23:03:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190408_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190408_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>jekyll 블로그 커스터마이징하기(4)</title>
        <description>&lt;p&gt;벌써 4탄이다 됐다..&lt;/p&gt;

&lt;p&gt;홈화면에 최근 포스트가 스크롤 없이 보였으면 해서,&lt;br /&gt;
리스트 형태에서 Grid 형태로 바꾸어보았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;이번에도-하드캐리한-개발자모드&quot;&gt;이번에도 하드캐리한 개발자모드&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grid형태는 포스트의 참고 부분에서 이미 사용되고 있어서 어떤 태그로 감싸져있나 확인해봤다.&lt;br /&gt;
&lt;strong&gt;grid__item&lt;/strong&gt; 형태였다. 지금 archive는 &lt;strong&gt;list__item&lt;/strong&gt;으로 되어있어서 grid__item으로 조정해봤다.&lt;br /&gt;
다행히 바로 Grid 형태로 바뀌는 것을 볼 수 있었고, html 파일에서 list대신 grid를 사용하도록 했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;posts-category-tag-메뉴도-같은-스타일을-사용하고-있었다니&quot;&gt;Posts, Category, Tag 메뉴도 같은 스타일을 사용하고 있었다니..&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;공통 파일 스타일을 바꿨더니 위 메뉴까지 전부다 Grid로 바뀌어서 쪼끔 이상해졌다.&lt;br /&gt;
그래서 html파일을 복사해 홈화면에서만 사용할 archive-single_gridstyle.html을 만들었다.&lt;br /&gt;
그리고 layout 파일에서 include 파일값만 변경하면 완성!&lt;/del&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;04/10 수정&lt;/p&gt;

  &lt;p&gt;아래 다른 게시글에 카테고리가 같은 게시글을 띄우고 싶어서 찾아보다가 이 방법을 쓰지 않아도 된다는 걸 알게됐다.&lt;br /&gt;
간단하게 html 파일 include에서 type=grid로 설정해주면, list타입에서 grid타입으로 변경이 가능하다.&lt;br /&gt;
jekyll을 통해 기능 확인을 한 후 gridstyle.html 파일은 삭제하여 업데이트 했다.&lt;br /&gt;
산넘어 산, 배울 게 너무 많다!&lt;/p&gt;

  &lt;p&gt;알고보니 정체를 알 수 없던 포문의 site.categories도 검색을 하다보니 jekyll의 변수였단 것을 알게 되었다.&lt;br /&gt;
무턱대고 된다고 하는 게 약간 조금 안 좋은 습관이긴 하지만 그래도 알아나가면서 고치고 있으니까! 
더 발전시켜나가보자 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단하게 Grid 형태로 변경했고, 포스트가 5개 일 땐 하나가 아래로 내려가버려서 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;파일에서 pagination 개수를 4개로 바꿨당 =)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;이전-홈화면&quot;&gt;이전 홈화면&lt;/h3&gt;
  &lt;p&gt;스크롤을 내려야 게시글들을 확인 가능했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/before_home.png&quot; alt=&quot;이전 홈화면&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;바뀐-홈화면&quot;&gt;바뀐 홈화면&lt;/h3&gt;
  &lt;p&gt;스크롤을 내리지 않아도 게시글을 확인 가능하다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/after_home.PNG&quot; alt=&quot;바뀐 홈화면&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 오늘의 커스터마이징도 성공 :) !&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Apr 2019 01:57:24 +0900</pubDate>
        <link>http://localhost:4000/blog/home_layout_update_2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/home_layout_update_2/</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>190407_Prepare Job Interview</title>
        <description>&lt;p&gt;오늘도 보안 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;xss란-무엇인가&quot;&gt;XSS란 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XSS(Cross-Site Scripting)&lt;/code&gt;는 웹 페이지에 &lt;strong&gt;악성 스크립트를 삽입하는 공격&lt;/strong&gt;이다.&lt;br /&gt;
주로 여러명의 사용자가 보게 되는 게시판에 악성 스크립트를 담은 글을 올리는 형태로 공격한다.&lt;br /&gt;
이를 통해 사용자의 쿠키나 세션을 탈취하거나, 자동으로 비정상적 기능을 수행하게 하는 등의 공격이 가능해진다.&lt;/p&gt;

&lt;p&gt;이를 대비하기 위해서는 사용자로부터 입력받은 값을 검사해 공격할 수 없도록 해야한다.&lt;br /&gt;
html 태그가 그대로 동작하지 않도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;striptag&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt;등의 함수로 출력 내용을 감싸는 등의 방법이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;csrf란-무엇인가&quot;&gt;CSRF란 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF(Cross-Site Request Forgery)&lt;/code&gt;는 악성 스크립트를 이용해 &lt;strong&gt;사용자가 의도하지 않은 행위를 하도록 하는 공격&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;예를 들어, 게시판에 관리자가 글을 클릭하면 관리자 권한을 가진 글로 바뀌게 하는 악성 스크립트를 담은 글을 올린다.&lt;br /&gt;
관리자가 공격자가 올린 링크를 누르게 되면, 브라우저는 악성 스크립트를 해석한다.&lt;br /&gt;
이를 통해 사용자의 의도와는 다른 글이 올라오는 등의 공격이 완성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공격자 게시글&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;제목: [시급] 관리자님 사이트가 이상해요
작성자: attacker(~@~.com)
본문: (악성 스크립트)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;공격 성공으로 올라온 게시글&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;제목: [공지] 필독 바람
작성자: 관리자(~@~.com)
본문: 후원 계좌가 변경되었음 (공격자 계좌)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XSS&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF&lt;/code&gt; 모두 악성 스크립트를 이용해 공격한다는 공통점이 있다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;XSS&lt;/code&gt;는 악성 스크립트를 통해 사용자(Client)를 공격했다면,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF&lt;/code&gt;는 악성 스크립트를 통해 웹 페이지(Server)를 공격한다는 차이점이 있다.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Apr 2019 17:03:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190407_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190407_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>190406_Prepare Job Interview</title>
        <description>&lt;p&gt;오늘은 보안:)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;buffer-overflow란-무엇이고-대비책은-무엇인가&quot;&gt;Buffer Overflow란 무엇이고 대비책은 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt;란 제한되어 있는 메모리의 양보다 많은 값을 입력해 지정된 메모리 이외 공간에 저장되게 하는 공격이다.&lt;br /&gt;
지정 메모리 이외 공간에 다른 값이 덮어쓰여지게 되면, 다른 데이터가 손상될 수 있다는 위험이 있다.&lt;/p&gt;

&lt;p&gt;이를 대비하기 위해서는 지정된 메모리 이상의 데이터를 받지 않도록 저장시에 입력량을 확인해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;sql-injection-공격이란-무엇이고-대비책은-무엇인가&quot;&gt;SQL Injection 공격이란 무엇이고 대비책은 무엇인가?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL Injection&lt;/code&gt;이란 SQL문을 서버로 전송해 데이터베이스를 비정상적으로 조작하는 코드 인젝션 공격 방법이다.&lt;br /&gt;
이를 통해 데이터베이스를 삭제하거나, 변경하고 추출하는 등의 행위가 가능하다.&lt;/p&gt;

&lt;p&gt;이를 대비하기 위해서는 유저에게 받은 값을 필터링해 데이터베이스를 조작하는 입력은 제한해야 한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Apr 2019 21:43:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190406_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190406_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>190405_Prepare Job Interview</title>
        <description>&lt;p&gt;오늘은 운영체제 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;윈도우와-리눅스의-차이점은&quot;&gt;윈도우와 리눅스의 차이점은?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;윈도우는 GUI(Graphical User Interface)기반으로, 인터페이스를 클릭하는 방식이다.&lt;br /&gt;
반면 리눅스는 명령어 기반으로 이뤄진다는 사용성의 특징이 있다.&lt;/p&gt;

&lt;p&gt;리눅스는 오픈소스이기 때문에 누구나 버그 수정이 가능하지만 윈도우의 소스는 비공개로 회사의 업데이트를 기다려야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;프로세스와-스레드의-차이점은&quot;&gt;프로세스와 스레드의 차이점은?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;프로세스&lt;/strong&gt;는 운영체제로부터 자원을 할당받는 작업의 단위이다.&lt;br /&gt;
실행될 때 운영체제로부터 프로세서, 필요한 주소공간, 메모리 등의 자원을 할당 받는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스레드&lt;/strong&gt;는 프로세스가 할당받은 자원을 이용하는 실행의 단위이다.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;한 프로세스 내에서 동작되는 여러 실행의 흐름&lt;/em&gt;&lt;/strong&gt;으로, 프로세스 내의 주소 공간과 자원들을 같은 프로세스 내에서 스레드끼리 공유할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;멀티-스레딩이란&quot;&gt;멀티 스레딩이란?&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나의 프로세스를 다수 실행 단위로 구분해 자원을 공유하고, 자원의 생성/관리 중복성을 최소화해 수행 능력을 향상시키는 것을 말한다.&lt;br /&gt;
이 때 각각의 스레드는 독립 작업을 수행해야 하기 때문에 각자의 스택과 PC 레지스터 값을 갖고 있다.&lt;/p&gt;

&lt;p&gt;멀티 프로세스로 실행되는 작업을 멀티 스레딩으로 실행할 경우,&lt;br /&gt;
프로세스를 생성해 자원을 할당하는 시스템 콜이 줄어 자원을 효율적으로 관리할 수 있다.&lt;br /&gt;
프로세스 간의 통신보다 스레드 간의 통신 비용이 적어 작업 간의 통신 부담이 줄어든다.&lt;/p&gt;

&lt;p&gt;효율은 좋지만 스레드 간 자원 공유는 전역 변수를 이용해 동기화 문제에 신경써야 한다는 단점이 있다.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Apr 2019 21:43:24 +0900</pubDate>
        <link>http://localhost:4000/interview/190405_PJI/</link>
        <guid isPermaLink="true">http://localhost:4000/interview/190405_PJI/</guid>
        
        <category>daily</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>jekyll 블로그 커스터마이징하기(3)</title>
        <description>&lt;p&gt;Daily Note를 쓰면서 당분간 테마에 손 안대겠단 말이 무색하게 또 손대버렸다.&lt;/p&gt;

&lt;p&gt;홈화면에 나도 멋지게 사진이 떴으면 해서 계속 바꿔보고 싶었다.&lt;br /&gt;
이번에도 새벽까지 뚝딱뚝딱 하다가 결국 완성!&lt;/p&gt;

&lt;p&gt;홈화면을 바꾸다가 포스트 형식도 더 맘에 드는 방식을 찾아서 또 바꿔버렸다.&lt;/p&gt;

&lt;p&gt;아무래도 밤에 일하는게 적성에 맞는 것이 분명해…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;개발자-모드가-짱이야&quot;&gt;개발자 모드가 짱이야!&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;오늘도 도움을 준 개발자 모드에게 이 모든 영광을 돌립니다..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;홈-레이아웃-바꾸기&quot;&gt;홈 레이아웃 바꾸기&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 홈화면을 구성하는 레이아웃은 &lt;code class=&quot;highlighter-rouge&quot;&gt;\_layouts\home&lt;/code&gt; 에 작성되어 있다.&lt;br /&gt;
조만간 jekyll 폴더 구성이 어떻게 되어있는지 정리해놔야겠다. 계속 하는데도 헷갈리는 중..&lt;/p&gt;

&lt;p&gt;암튼, &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes 홈화면&lt;/a&gt;을 참고해보면, 큼지막한 그림이 page__hero 클래스를 쓴 걸 확인할 수 있었다.&lt;br /&gt;
홈화면엔 넣는 방법을 잘 모르겠어서 다른 레이아웃 구성을 살피다가 &lt;strong&gt;splash.html&lt;/strong&gt; 구성이 마음에 들었다.&lt;/p&gt;

&lt;p&gt;사실 지금 와서 생각해보면 그냥 home.html에 구성해도 됐는데 뭔가 꽂혔나보다…&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;에서 첫 레이아웃을 splash로 바꿨고, 옆에 붙어있던 내 소개도 없앴다.&lt;br /&gt;
이번이야말로 그냥 야매로 구성했는데 아래 if문 조건을 어떻게 만족하는지 모르겠어서 그냥 html로 다 넣어줘버렸다.&lt;/p&gt;

&lt;p&gt;아래는 html 형식이라그런지 감싸도 코드가 안보여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;를 떼줬다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ if page.header.overlay_color or page.header.overlay_image or page.header.image }
  { include page__hero.html }
{ elsif page.header.video.id and page.header.video.provider }
  { include page__hero_video.html }
{ endif }  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;html공부를 아무래도 좀 더 해야할 것 같다..&lt;br /&gt;
돌아돌아 엄청 오래걸렸긴 하지만 코드만 보면 너무 짧아서 엄청 쉽게 만들었다.&lt;br /&gt;
page__hero 클래스를 사용해서 이미지를 넣고 home에 있던 최근 게시물 include문을 가져와서 원하는 형태는 금방 만들 수 있었다.&lt;br /&gt;
page__hero class는 &lt;code class=&quot;highlighter-rouge&quot;&gt;\_include&lt;/code&gt; 폴더에 있으니 혹시 바꿔보려면 참고!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;포스트-여백-바꾸기&quot;&gt;포스트 여백 바꾸기&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;내 소개를 포스트 형식에서도 없애면서 왼쪽에 남는 여백이 너무 거슬렸다.&lt;br /&gt;
왼쪽으로 옮길 수 있는 방법이 없을까 CSS 스타일을 바꿔보다가 float를 왼쪽으로 바꿔주니 왼쪽 여백은 없앨 수 있었다.&lt;/p&gt;

&lt;p&gt;그런데 여전히 오른쪽에 여백이 남아서 뭔가 이상했다.&lt;br /&gt;
또 이리저리 스타일을 바꿔보다가, width값을 100%로 주면 꽉차는 형태로 바뀌는 것을 확인했다.&lt;/p&gt;

&lt;p&gt;CSS 파일을 확인해보니 sidebar로 인한 공간을 남겨두는 것 같았다.&lt;br /&gt;
과감하게 그 값을 지우고 100%로 출력되게 바꿨고, 지금의 형태로 완성!&lt;/p&gt;

&lt;p&gt;좀 큼직큼직한 면이 있지만 매우 마음에 든다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;_configyml로-제목-메뉴-설정해주기&quot;&gt;_config.yml로 제목 메뉴 설정해주기&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 기능은 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;Minimal Mistakes에서 커스터마이징 방법&lt;/a&gt;을 보다가 발견했다.&lt;br /&gt;
breadcrumbs 속성을 true로 바꾸면 되는데, 그러면 상단에 아래와 같이 메뉴가 생긴다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/breadcrumbs.PNG&quot; alt=&quot;breadcrumbs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 포스트에 달린 카테고리에 있는 글을 모아보거나, 홈으로 되돌아갈 수 있다.&lt;/p&gt;

&lt;p&gt;뭔가 더 블로그스러워진 것 같아서 기분이 좋다 :)&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Apr 2019 15:27:24 +0900</pubDate>
        <link>http://localhost:4000/blog/home_layout_update/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/home_layout_update/</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>sitemap.xml EntityRef: expecfing ';' 에러</title>
        <description>&lt;p&gt;Google Search Console을 보는데 자꾸 사이트 맵 제출이 제대로 안되는 것 같았다.&lt;br /&gt;
그래서 블로그 url에 sitemap.xml을 쳐서 확인해보니 아래와 같은 상황이 펼쳐졌다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sitemap_error.PNG&quot; alt=&quot;사이트맵 에러&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왜! 나는 아무짓도 안했는데!! 갑자리 에러라니…&lt;/p&gt;

&lt;p&gt;이리저리 검색을 하다가 이유를 찾았다.&lt;br /&gt;
잘 살펴보니 포스트 이름 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;가 들어간 것이 있었다.&lt;br /&gt;
이거 하나때문에 한참을 검색했다니 ㅠ_ㅠ&lt;/p&gt;

&lt;p&gt;앞으론 주의해야겠다. 굳이 넣고싶으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;amp;&lt;/code&gt;로 넣어야 한다고 한다.&lt;br /&gt;
바꿔야하는 모양은 &lt;a href=&quot;http://mrrena.blogspot.com/2009/07/entityref-expecting-at-line-1.html&quot;&gt;여기&lt;/a&gt;를 참고하자!&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Apr 2019 22:35:24 +0900</pubDate>
        <link>http://localhost:4000/blog/sitemap_error/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/sitemap_error/</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>190403_DailyNote</title>
        <description>&lt;h4 id=&quot;my-trivial-today&quot;&gt;&lt;em&gt;My Trivial Today&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;오늘은 뜻밖의 서류 합격 소식을 받아서 기분 좋아진 날이다 :)&lt;br /&gt;
그러나 코딩 테스트를 하나도 준비를 안해서 광탈할 것 같아 마음이 아프다.&lt;br /&gt;
지금부터라도 진짜로 열심히 해야한다 ㅠ_ㅠ&lt;br /&gt;
마음에 든 회사 중 하나여서 꼭 면접까지 갔으면 좋겠다!!!&lt;/p&gt;

&lt;p&gt;오늘도 블로그 테마를 또 살짝 손봤다.&lt;br /&gt;
처음하느라 색상 변경을 중구난방으로 해놨는데, 글로벌 변수로 통합 변경될 수 있도록 싹 바꿨다.&lt;br /&gt;
일일히 바꾸느라 힘들었는데 글로벌 변수를 찾아서 정말 다행이다…&lt;/p&gt;

&lt;p&gt;&lt;del&gt;역시 사람은 고생을 해야 실력이 느는게 맞는것..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;이제 당분간은 잠시 커스터마이징에 손을 놓을 예정이다.&lt;br /&gt;
다른 할 일이 많은데 자꾸 여기에만 정신팔리고 있어서 안되겠어 :(&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;today-i-did&quot;&gt;&lt;em&gt;Today I Did&lt;/em&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;영어 회화 공부하기&lt;/li&gt;
  &lt;li&gt;Git 강의 듣기&lt;/li&gt;
  &lt;li&gt;데이터베이스 공부하기&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;someday-i-will&quot;&gt;&lt;em&gt;Someday I Will&lt;/em&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;블로그 테마 바꾸기&lt;br /&gt;
사이드바 부분 모바일 화면에서처럼 바꾸기&lt;br /&gt;
홈화면 바꾸기&lt;/li&gt;
  &lt;li&gt;알고리즘 하루에 2개씩 풀기&lt;/li&gt;
  &lt;li&gt;프로젝트 정리하기&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 03 Apr 2019 21:58:24 +0900</pubDate>
        <link>http://localhost:4000/tmi/190403_DN/</link>
        <guid isPermaLink="true">http://localhost:4000/tmi/190403_DN/</guid>
        
        <category>daily</category>
        
        
        <category>TMI</category>
        
      </item>
    
  </channel>
</rss>